@startuml

actor other_sh
actor soss_core
participant SystemHandle
participant Factory
collections type_libs
entity rclcpp

== initialization ==
soss_core -> SystemHandle: configure
activate SystemHandle
SystemHandle -> rclcpp: __init__()
SystemHandle -> rclcpp: node()
activate rclcpp
activate rclcpp /'This represents the new created thread'/
SystemHandle <-- rclcpp: status
deactivate rclcpp
SystemHandle -> soss_core: search("ros2")
activate soss_core
SystemHandle <-- soss_core
deactivate soss_core
loop for all required type
    SystemHandle -> soss_core: find_message_lib()
    activate soss_core
    SystemHandle <-- soss_core: status
    deactivate soss_core
    SystemHandle -> Factory: create_type()
    activate Factory
    Factory -> type_libs: type()
    activate type_libs
    Factory <-- type_libs: type
    deactivate type_libs
    SystemHandle <-- Factory: type
    deactivate Factory
end
soss_core <-- SystemHandle: status
deactivate SystemHandle

soss_core -> SystemHandle: advertise
activate SystemHandle
SystemHandle -> Factory: create_publisher()
activate Factory
Factory -> type_libs: make_publisher()
activate type_libs
type_libs -> rclcpp: create_publisher()
activate rclcpp
type_libs <-- rclcpp: status
deactivate rclcpp
Factory <-- type_libs: Publisher
deactivate type_libs
SystemHandle <-- Factory: Publisher
deactivate Factory
soss_core <-- SystemHandle: status
deactivate SystemHandle

soss_core -> SystemHandle: subscribe
activate SystemHandle
SystemHandle -> Factory: create_subscriber()
activate Factory
Factory -> type_libs: make_subscriber()
activate type_libs
type_libs -> rclcpp: create_subscriber()
activate rclcpp
type_libs <-- rclcpp: status
deactivate rclcpp
Factory <-- type_libs: Subscriber
deactivate type_libs
SystemHandle <-- Factory: Subscriber
deactivate Factory
soss_core <-- SystemHandle: status
deactivate SystemHandle

== to ros2 ==
rclcpp -> type_libs: subscription_callback()
activate type_libs
type_libs -> type_libs: convert_to_xtype()
type_libs -> other_sh: soss_subscription_cb()
activate other_sh
type_libs <-- other_sh: status
deactivate other_sh
rclcpp <-- type_libs: status
deactivate type_libs

== from ros2 ==
other_sh -> type_libs: publish()
activate type_libs
type_libs -> type_libs: converto_to_ros2()
type_libs -> rclcpp: publish()
activate rclcpp
type_libs <-- rclcpp: status
deactivate rclcpp
other_sh <-- type_libs: status
deactivate type_libs

== while running ==
soss_core -> SystemHandle: spin_once()
activate SystemHandle
SystemHandle -> rclcpp: ok()
activate rclcpp
SystemHandle <-- rclcpp: status
deactivate rclcpp
soss_core <-- SystemHandle: status
deactivate SystemHandle


@enduml
